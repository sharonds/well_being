name: Simple Automation (Single File)

on:
  workflow_dispatch:
    inputs:
      task_name:
        description: 'Task to automate (settings-menu, performance-timer, error-codes)'
        required: true
        default: 'settings-menu'
        type: choice
        options:
          - settings-menu
          - performance-timer
          - error-codes
      issue_number:
        description: 'Issue number being automated'
        required: true
        type: string

jobs:
  automate-single-file:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create feature branch
        run: |
          git config --global user.name "GitHub Actions Simple Automation"
          git config --global user.email "actions@github.com"
          # Standardized branch naming with timestamp to prevent collisions
          TIMESTAMP=$(date +%s)
          BRANCH="micro-${{ github.event.inputs.task_name }}-${TIMESTAMP}"
          echo "BRANCH_NAME=${BRANCH}" >> $GITHUB_ENV
          git checkout -b ${BRANCH}
          git push origin ${BRANCH}

      - name: Implement Settings Menu
        if: github.event.inputs.task_name == 'settings-menu'
        run: |
          cat > source/SettingsMenu.mc << 'EOF'
          using Toybox.WatchUi as Ui;
          using Toybox.System as Sys;
          
          // Simple settings menu for feature flag toggles (Issue #9 AC7)
          class SettingsMenu extends Ui.Menu2 {
              function initialize() {
                  Menu2.initialize({:title=>"Settings"});
                  
                  // Sleep toggle
                  addItem(new Ui.ToggleMenuItem(
                      "Sleep Tracking",
                      {:enabled=>"On", :disabled=>"Off"},
                      :sleep,
                      Sys.getApp().getProperty("enableSleep") != null ? Sys.getApp().getProperty("enableSleep") : false,
                      {}
                  ));
                  
                  // Stress toggle  
                  addItem(new Ui.ToggleMenuItem(
                      "Stress Tracking", 
                      {:enabled=>"On", :disabled=>"Off"},
                      :stress,
                      Sys.getApp().getProperty("enableStress") != null ? Sys.getApp().getProperty("enableStress") : false,
                      {}
                  ));
                  
                  // HRV toggle
                  addItem(new Ui.ToggleMenuItem(
                      "HRV Tracking",
                      {:enabled=>"On", :disabled=>"Off"}, 
                      :hrv,
                      Sys.getApp().getProperty("enableHRV") != null ? Sys.getApp().getProperty("enableHRV") : false,
                      {}
                  ));
              }
              
              function onSelect(item) {
                  var id = item.getId();
                  var enabled = item.isEnabled();
                  
                  if (id == :sleep) {
                      Sys.getApp().setProperty("enableSleep", enabled);
                      ScoreEngine.ENABLE_SLEEP = enabled;
                  } else if (id == :stress) {
                      Sys.getApp().setProperty("enableStress", enabled);
                      ScoreEngine.ENABLE_STRESS = enabled;
                  } else if (id == :hrv) {
                      Sys.getApp().setProperty("enableHRV", enabled);
                      ScoreEngine.ENABLE_HRV = enabled;
                  }
              }
          }
          EOF
          git add source/SettingsMenu.mc
          git commit -m "feat: Add SettingsMenu component for runtime feature toggles

          - Simple menu with sleep/stress/HRV toggles
          - Persists settings to app properties
          - Updates ScoreEngine flags dynamically
          - Addresses Issue #${{ github.event.inputs.issue_number }} AC7 partial implementation"

      - name: Implement Performance Timer
        if: github.event.inputs.task_name == 'performance-timer'
        run: |
          cat > source/PerformanceTimer.mc << 'EOF'
          using Toybox.System as Sys;
          
          // Simple performance timing utility (Issue #9 AC8)
          class PerformanceTimer {
              private static var _startTime = null;
              private static var _measurements = [];
              
              public static function start() {
                  _startTime = Sys.getTimer();
              }
              
              public static function stop() {
                  if (_startTime == null) { return null; }
                  var elapsed = Sys.getTimer() - _startTime;
                  _measurements.add(elapsed);
                  _startTime = null;
                  return elapsed;
              }
              
              public static function getAverage() {
                  if (_measurements.size() == 0) { return null; }
                  var sum = 0;
                  for (var i = 0; i < _measurements.size(); i++) {
                      sum += _measurements[i];
                  }
                  return sum / _measurements.size();
              }
              
              public static function clear() {
                  _measurements = [];
                  _startTime = null;
              }
          }
          EOF
          git add source/PerformanceTimer.mc
          git commit -m "feat: Add PerformanceTimer utility for AC8 validation

          - Simple start/stop timing functionality
          - Tracks measurements for average calculation  
          - Supports <50ms performance requirement validation
          - Addresses Issue #${{ github.event.inputs.issue_number }} AC8 infrastructure"

      - name: Implement Error Codes
        if: github.event.inputs.task_name == 'error-codes'
        run: |
          cat > source/ErrorCodes.mc << 'EOF'
          // Structured error codes for logging (Issue #9 AC4)
          class ErrorCodes {
              // Metric fetch errors
              public const METRIC_STEPS = "METRIC_STEPS";
              public const METRIC_RHR = "METRIC_RHR"; 
              public const METRIC_SLEEP = "METRIC_SLEEP";
              public const METRIC_STRESS = "METRIC_STRESS";
              public const METRIC_HRV = "METRIC_HRV";
              
              // Persistence errors
              public const PERSIST_SAVE = "PERSIST_SAVE";
              public const PERSIST_LOAD = "PERSIST_LOAD";
              public const PERSIST_HISTORY = "PERSIST_HISTORY";
              
              // Computation errors
              public const COMPUTE_SCORE = "COMPUTE_SCORE";
              public const COMPUTE_RECOMMENDATION = "COMPUTE_RECOMMENDATION";
              
              // UI errors
              public const UI_RENDER = "UI_RENDER";
              public const UI_INPUT = "UI_INPUT";
          }
          EOF
          git add source/ErrorCodes.mc  
          git commit -m "feat: Add ErrorCodes constants for structured logging

          - Standardized error codes for all major operations
          - Supports Logger.add(level, code + message) pattern
          - Enables systematic error tracking and debugging
          - Addresses Issue #${{ github.event.inputs.issue_number }} AC4 infrastructure"

      - name: Push changes and create PR
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Push changes to the dynamically named branch
          git push origin ${{ env.BRANCH_NAME }}
          
          # Verify PR creation will work
          if ! gh pr list --head ${{ env.BRANCH_NAME }} | grep -q ${{ env.BRANCH_NAME }}; then
            echo "✅ Branch ready for PR creation"
          else
            echo "❌ PR already exists for this branch"
            exit 1
          fi
          
          # Create PR with task-specific content
          TASK_DISPLAY=$(echo "${{ github.event.inputs.task_name }}" | sed 's/-/ /g' | awk '{for(i=1;i<=NF;i++)sub(/./,toupper(substr($i,1,1)),$i)}1')
          
          gh pr create \
            --title "Micro-automation: ${TASK_DISPLAY}" \
            --body "## Simple Automation Test: ${TASK_DISPLAY}

          ✅ **Single File Implementation** - Testing simplified automation approach
          🎯 **Clear Success Criteria** - File created, compiles, functions correctly  
          🤖 **GitHub Actions Generated** - Automated via simple-automation.yml workflow

          ### Implementation:
          - Created \`source/$(echo ${{ github.event.inputs.task_name }} | sed 's/-//g' | awk '{print toupper(substr($0,1,1))tolower(substr($0,2))}').mc\`
          - Focused single-file deliverable
          - Clear API and functionality

          ### Testing Simplified Automation:
          - **Goal**: Validate automation works for simple, focused tasks
          - **Next**: Scale to more complex micro-issues if successful
          - **Part of**: Issue #${{ github.event.inputs.issue_number }} decomposition strategy

          **Branch**: \`micro-${{ github.event.inputs.task_name }}-automation\`" \
            --assignee sharonds

      - name: Update issue with progress
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TASK_DISPLAY=$(echo "${{ github.event.inputs.task_name }}" | sed 's/-/ /g' | awk '{for(i=1;i<=NF;i++)sub(/./,toupper(substr($i,1,1)),$i)}1')
          
          gh issue comment ${{ github.event.inputs.issue_number }} \
            --body "🤖 **Simple Automation Success: ${TASK_DISPLAY}**

          ✅ **Micro-automation completed successfully!**
          - Single file implementation: \`source/$(echo ${{ github.event.inputs.task_name }} | sed 's/-//g' | awk '{print toupper(substr($0,1,1))tolower(substr($0,2))}').mc\`  
          - Branch: \`micro-${{ github.event.inputs.task_name }}-automation\`
          - PR created for review and validation

          **Key Success**: Simplified automation approach working!
          **Next**: Ready to scale to more micro-issues with confidence.

          🎯 **Automation Strategy Validated** - Single-file, focused tasks succeed."